#include "ros/ros.h"
#include <string>
#include <iostream>
#include "std_msgs/String.h"
#include "std_msgs/Header.h"
#include <vector>
#include <string>
#include <boost/lexical_cast.hpp>
#include "opaque-pub.h"
#include "mp-pub.h"
#include "geometry_msgs/PoseStamped.h";
#include <actionlib/client/simple_action_client.h>
#include <move_base_msgs/MoveBaseAction.h>


using namespace std;



float getNextNumber(char *message, int *i) {
  int j=*i;
  string number;
  while (message[j]!=' ') {
    number=number+message[j];
    j++;
  }
  cout<<number<<"\n";
  *i=j;
  return boost::lexical_cast<float>(number);

}

typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> Client;

int main(int argc, char **argv) {
    //SET ROS 
  ros::init(argc, argv, "Navigation");
  string dest="OPRS_SUP";
    
  ROS_INFO("starting navigation");  
  Client client("move_base",true);
  client.waitForServer();
           
  int mpSocket=external_register_to_the_mp_prot("Navigation", 3300, STRINGS_PT);
  if (mpSocket!=-1) {
    ROS_INFO("connected to the message parser");
      
    int length;
    char *sender=read_string_from_socket(mpSocket,&length);
    char *message=read_string_from_socket(mpSocket,&length);
      
      vector<geometry_msgs::PoseStamped> posesStamped; 
      ROS_INFO("message %s",message);
      int i=0;
      while(message[i]!='.'){
	i++;
      }
      i++;
      while (message[i]!=')') {
	while (message[i]!='(') {
	  i++;
	}
	i++;
	i++;
	i++;
	geometry_msgs::PoseStamped aPoseStamped;

	aPoseStamped.header.stamp=ros::Time::now();
	aPoseStamped.header.frame_id="map";
	
<<<<<<< HEAD
	aPoseStamped.pose.position.x=getNextNumber(message,&i);
	i++;
	aPoseStamped.pose.position.y=getNextNumber(message,&i);
	i++;
	aPoseStamped.pose.position.z=getNextNumber(message,&i);
	i++;
	aPoseStamped.pose.orientation.x=getNextNumber(message,&i);
	i++;
	aPoseStamped.pose.orientation.y=getNextNumber(message,&i);
	i++;
	aPoseStamped.pose.orientation.z=getNextNumber(message,&i);
	i++;
	aPoseStamped.pose.orientation.w=getNextNumber(message,&i);
	i++;

	cout<<message[i]<<"\n";
	i++;
	cout<<message[i]<<"\n";	
	i++;
	cout<<message[i]<<"\n";
	i++;
	cout<<message[i]<<"\n";
	i++;
	cout<<message[i]<<"\n";
	posesStamped.push_back(aPoseStamped);
      }
      cout<<"out of cycle"<<"\n";
=======
	 aPoseStamped.pose.position.x=(boost::lexical_cast<float>(message[i]));
	 i++
	 aPoseStamped.pose.position.y=(boost::lexical_cast<float>(message[i]));
	 i++
	 aPoseStamped.pose.position.z=(boost::lexical_cast<float>(message[i]));
	 i++
	 aPoseStamped.pose.orientation.x=(boost::lexical_cast<float>(message[i]));
	 i++
	 aPoseStamped.pose.orientation.y=(boost::lexical_cast<float>(message[i]));
	 i++
	 aPoseStamped.pose.orientation.z=(boost::lexical_cast<float>(message[i]));
	 i++
	 aPoseStamped.pose.orientation.w=(boost::lexical_cast<float>(message[i]));
	 i++;
	 i++;
	 posesStamped.push_back(aPoseStamped);
      }
>>>>>>> 62e277f20ea3058bdfecb472b4a7e9998339d092
       
     
      int n=posesStamped.size();
      string response="OK";
      cout<<n<<"\n";

      for (int i=0; i<n && response!="FAILURE"; i++) {
	move_base_msgs::MoveBaseGoal goal;
	goal.target_pose=posesStamped[i];
	cout<<goal.target_pose.pose.position.x<<"\n";
	cout<<goal.target_pose.pose.position.y<<"\n";
	cout<<goal.target_pose.pose.position.z<<"\n";
	client.sendGoal(goal);
	client.waitForResult(ros::Duration(5.0));
	if (client.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
	  response="OK";
	else {
	  response="FAILURE";
	}
	printf("Current State: %s\n", client.getState().toString().c_str());
	string strmessage="(BaseActions.update Navigation "+response+")";
	char returnMessage[50];
	strcpy(returnMessage,strmessage.c_str());
	ROS_INFO("Return message %s",returnMessage);
	send_message_string(returnMessage,dest.c_str());
      }
      string strmessage="(BaseActions.response Navigation "+response+")";
      char returnMessage[50];
      strcpy(returnMessage,strmessage.c_str());
      ROS_INFO("Return message %s",returnMessage);
      send_message_string(returnMessage,dest.c_str());
    
  }
  else {
    ROS_INFO("error in connecting to the message passer. Closing the node");
    return 0;
  }
}


