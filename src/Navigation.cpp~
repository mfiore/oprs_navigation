#include "ros/ros.h"
#include <string>
#include <iostream>
#include "std_msgs/String.h"
#include "std_msgs/Header.h"
#include <vector>
#include <string>
#include "appl/appl_request.h"
#include <boost/lexical_cast.hpp>
#include "opaque-pub.h"
#include "mp-pub.h"

using namespace std;


ros::ServiceClient applClient;
appl_request applRequestSrv;




int main(int argc, char **argv) {
    //SET ROS 
    ros::init(argc, argv, "navigation");
    
    ros::NodeHandle n;

    applClient = n.serviceClient<appl_request>("appl_request");
   
    ROS_INFO("starting supervisor");
        
    int mpSocket=external_register_to_the_mp_prot("Handover", 3300, STRINGS_PT);
    if (mpSocket!=-1) {
	ROS_INFO("connected to the message parser");
	int length;

	string command;
	command="";
	while(command!="quit") {
	    int i=1;
	    char *sender=read_string_from_socket(mpSocket,&length);
	    char *message=read_string_from_socket(mpSocket,&length);

	    ROS_INFO("message %s",message);
	    
	    string observations,xState;
	    command="";
	    observations="";
	    xState="";
	    while(message[i]!=' ' && message[i]!=')') {
		command=command+message[i];
		i++;
	    }
	    i++;
	    i++;
	    if (command!="quit") {
		while (message[i]!='"') {
		    xState= xState+message[i];
		    i++;
		}
		i++;
		i++;
		i++;
		if (command=="update") {
		    while(message[i]!='"') {
			observations=observations+message[i];
			i++;
		    }
		    
		}
			
	    
		free(sender);
		free(message);
		if (observations.size()==0) {
		    observations=" ";
		}
		ROS_INFO("%s",command.c_str());
		applRequestSrv.request.obs = observations;
		
		if (command=="init") {
		    applRequestSrv.request.cmd = 1;
		} else applRequestSrv.request.cmd = 2;
		applRequestSrv.request.xstate = xState;

		ROS_INFO("cmd= %i",applRequestSrv.request.cmd);
		ROS_INFO("obs= %s",applRequestSrv.request.obs.c_str());
		ROS_INFO("xState= %s",applRequestSrv.request.xstate.c_str());
		if (applClient.call(applRequestSrv)) {
		    //	ROS_INFO("Received response");
		    int action = applRequestSrv.response.action;
		    vector<string> ystate = applRequestSrv.response.ystate;
		
		    string strmessage="(POMDP.response Handover "+boost::lexical_cast<string>(action)+" "+ystate[0]+")";
		    char dest[10]="OPRS_SUP";
		    char message[50];
		    strcpy(message,strmessage.c_str());
		    ROS_INFO("Return message %s",message);
		    send_message_string(message,dest);
		}
	    }
	}
    }
	
    else {
	ROS_INFO("error in connecting to the message passer. Closing the node");
    }
}


